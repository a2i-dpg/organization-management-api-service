/*
 * organization management api service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HumanResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HumanResourcesApi {
    private ApiClient localVarApiClient;

    public HumanResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HumanResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for humanResourcesGet
     * @param page  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param rowStatus  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesGetCall(Integer page, Integer limit, String order, Integer rowStatus, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/human-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call humanResourcesGetValidateBeforeCall(Integer page, Integer limit, String order, Integer rowStatus, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = humanResourcesGetCall(page, limit, order, rowStatus, titleEn, titleBn, _callback);
        return localVarCall;

    }

    /**
     * get list
     *  API endpoint to get the list of Human Resources.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param rowStatus  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return HumanResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public HumanResource humanResourcesGet(Integer page, Integer limit, String order, Integer rowStatus, String titleEn, String titleBn) throws ApiException {
        ApiResponse<HumanResource> localVarResp = humanResourcesGetWithHttpInfo(page, limit, order, rowStatus, titleEn, titleBn);
        return localVarResp.getData();
    }

    /**
     * get list
     *  API endpoint to get the list of Human Resources.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param rowStatus  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return ApiResponse&lt;HumanResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HumanResource> humanResourcesGetWithHttpInfo(Integer page, Integer limit, String order, Integer rowStatus, String titleEn, String titleBn) throws ApiException {
        okhttp3.Call localVarCall = humanResourcesGetValidateBeforeCall(page, limit, order, rowStatus, titleEn, titleBn, null);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get list (asynchronously)
     *  API endpoint to get the list of Human Resources.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param rowStatus  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesGetAsync(Integer page, Integer limit, String order, Integer rowStatus, String titleEn, String titleBn, final ApiCallback<HumanResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = humanResourcesGetValidateBeforeCall(page, limit, order, rowStatus, titleEn, titleBn, _callback);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for humanResourcesHumanResourceIdDelete
     * @param humanResourceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesHumanResourceIdDeleteCall(Integer humanResourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/human-resources/{humanResourceId}"
            .replaceAll("\\{" + "humanResourceId" + "\\}", localVarApiClient.escapeString(humanResourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call humanResourcesHumanResourceIdDeleteValidateBeforeCall(Integer humanResourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'humanResourceId' is set
        if (humanResourceId == null) {
            throw new ApiException("Missing the required parameter 'humanResourceId' when calling humanResourcesHumanResourceIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = humanResourcesHumanResourceIdDeleteCall(humanResourceId, _callback);
        return localVarCall;

    }

    /**
     * delete
     *  API endpoint to delete the specified human Resource.A successful request response will show 200 HTTP status code
     * @param humanResourceId  (required)
     * @return HumanResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public HumanResource humanResourcesHumanResourceIdDelete(Integer humanResourceId) throws ApiException {
        ApiResponse<HumanResource> localVarResp = humanResourcesHumanResourceIdDeleteWithHttpInfo(humanResourceId);
        return localVarResp.getData();
    }

    /**
     * delete
     *  API endpoint to delete the specified human Resource.A successful request response will show 200 HTTP status code
     * @param humanResourceId  (required)
     * @return ApiResponse&lt;HumanResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HumanResource> humanResourcesHumanResourceIdDeleteWithHttpInfo(Integer humanResourceId) throws ApiException {
        okhttp3.Call localVarCall = humanResourcesHumanResourceIdDeleteValidateBeforeCall(humanResourceId, null);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete (asynchronously)
     *  API endpoint to delete the specified human Resource.A successful request response will show 200 HTTP status code
     * @param humanResourceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesHumanResourceIdDeleteAsync(Integer humanResourceId, final ApiCallback<HumanResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = humanResourcesHumanResourceIdDeleteValidateBeforeCall(humanResourceId, _callback);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for humanResourcesHumanResourceIdGet
     * @param humanResourceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesHumanResourceIdGetCall(Integer humanResourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/human-resources/{humanResourceId}"
            .replaceAll("\\{" + "humanResourceId" + "\\}", localVarApiClient.escapeString(humanResourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call humanResourcesHumanResourceIdGetValidateBeforeCall(Integer humanResourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'humanResourceId' is set
        if (humanResourceId == null) {
            throw new ApiException("Missing the required parameter 'humanResourceId' when calling humanResourcesHumanResourceIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = humanResourcesHumanResourceIdGetCall(humanResourceId, _callback);
        return localVarCall;

    }

    /**
     * get one
     * API endpoint to get a humanResource .A successful request response will show 200 HTTP status code
     * @param humanResourceId  (required)
     * @return HumanResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public HumanResource humanResourcesHumanResourceIdGet(Integer humanResourceId) throws ApiException {
        ApiResponse<HumanResource> localVarResp = humanResourcesHumanResourceIdGetWithHttpInfo(humanResourceId);
        return localVarResp.getData();
    }

    /**
     * get one
     * API endpoint to get a humanResource .A successful request response will show 200 HTTP status code
     * @param humanResourceId  (required)
     * @return ApiResponse&lt;HumanResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HumanResource> humanResourcesHumanResourceIdGetWithHttpInfo(Integer humanResourceId) throws ApiException {
        okhttp3.Call localVarCall = humanResourcesHumanResourceIdGetValidateBeforeCall(humanResourceId, null);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get one (asynchronously)
     * API endpoint to get a humanResource .A successful request response will show 200 HTTP status code
     * @param humanResourceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesHumanResourceIdGetAsync(Integer humanResourceId, final ApiCallback<HumanResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = humanResourcesHumanResourceIdGetValidateBeforeCall(humanResourceId, _callback);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for humanResourcesHumanResourceIdPut
     * @param humanResourceId  (required)
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesHumanResourceIdPutCall(Integer humanResourceId, Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/human-resources/{humanResourceId}"
            .replaceAll("\\{" + "humanResourceId" + "\\}", localVarApiClient.escapeString(humanResourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (humanResourceTemplateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("human_resource_template_id", humanResourceTemplateId));
        }

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (organizationUnitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_unit_id", organizationUnitId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (rankId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank_id", rankId));
        }

        if (displayOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_order", displayOrder));
        }

        if (isDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_designation", isDesignation));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call humanResourcesHumanResourceIdPutValidateBeforeCall(Integer humanResourceId, Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'humanResourceId' is set
        if (humanResourceId == null) {
            throw new ApiException("Missing the required parameter 'humanResourceId' when calling humanResourcesHumanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling humanResourcesHumanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organizationUnitId' is set
        if (organizationUnitId == null) {
            throw new ApiException("Missing the required parameter 'organizationUnitId' when calling humanResourcesHumanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling humanResourcesHumanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling humanResourcesHumanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'isDesignation' is set
        if (isDesignation == null) {
            throw new ApiException("Missing the required parameter 'isDesignation' when calling humanResourcesHumanResourceIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = humanResourcesHumanResourceIdPutCall(humanResourceId, organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * update
     * API endpoint to update an existing organization unit types.A successful request response will show 201 HTTP status code
     * @param humanResourceId  (required)
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public void humanResourcesHumanResourceIdPut(Integer humanResourceId, Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus) throws ApiException {
        humanResourcesHumanResourceIdPutWithHttpInfo(humanResourceId, organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus);
    }

    /**
     * update
     * API endpoint to update an existing organization unit types.A successful request response will show 201 HTTP status code
     * @param humanResourceId  (required)
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> humanResourcesHumanResourceIdPutWithHttpInfo(Integer humanResourceId, Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = humanResourcesHumanResourceIdPutValidateBeforeCall(humanResourceId, organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update (asynchronously)
     * API endpoint to update an existing organization unit types.A successful request response will show 201 HTTP status code
     * @param humanResourceId  (required)
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesHumanResourceIdPutAsync(Integer humanResourceId, Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = humanResourcesHumanResourceIdPutValidateBeforeCall(humanResourceId, organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for humanResourcesPost
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesPostCall(Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/human-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (humanResourceTemplateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("human_resource_template_id", humanResourceTemplateId));
        }

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (organizationUnitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_unit_id", organizationUnitId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (rankId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank_id", rankId));
        }

        if (displayOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_order", displayOrder));
        }

        if (isDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_designation", isDesignation));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call humanResourcesPostValidateBeforeCall(Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling humanResourcesPost(Async)");
        }
        
        // verify the required parameter 'organizationUnitId' is set
        if (organizationUnitId == null) {
            throw new ApiException("Missing the required parameter 'organizationUnitId' when calling humanResourcesPost(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling humanResourcesPost(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling humanResourcesPost(Async)");
        }
        
        // verify the required parameter 'isDesignation' is set
        if (isDesignation == null) {
            throw new ApiException("Missing the required parameter 'isDesignation' when calling humanResourcesPost(Async)");
        }
        

        okhttp3.Call localVarCall = humanResourcesPostCall(organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * create
     * API endpoint to create a Human Resource.A successful request response will show 201 HTTP status code
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @return HumanResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public HumanResource humanResourcesPost(Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus) throws ApiException {
        ApiResponse<HumanResource> localVarResp = humanResourcesPostWithHttpInfo(organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus);
        return localVarResp.getData();
    }

    /**
     * create
     * API endpoint to create a Human Resource.A successful request response will show 201 HTTP status code
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;HumanResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HumanResource> humanResourcesPostWithHttpInfo(Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = humanResourcesPostValidateBeforeCall(organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus, null);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * API endpoint to create a Human Resource.A successful request response will show 201 HTTP status code
     * @param organizationId  (required)
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param isDesignation  (required)
     * @param humanResourceTemplateId  (optional)
     * @param parentId  (optional)
     * @param rankId  (optional)
     * @param displayOrder  (optional)
     * @param status  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call humanResourcesPostAsync(Integer organizationId, Integer organizationUnitId, String titleEn, String titleBn, Integer isDesignation, Integer humanResourceTemplateId, Integer parentId, Integer rankId, Integer displayOrder, Integer status, Integer rowStatus, final ApiCallback<HumanResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = humanResourcesPostValidateBeforeCall(organizationId, organizationUnitId, titleEn, titleBn, isDesignation, humanResourceTemplateId, parentId, rankId, displayOrder, status, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<HumanResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
