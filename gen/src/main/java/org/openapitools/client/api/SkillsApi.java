/*
 * organization management api service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Skill;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SkillsApi {
    private ApiClient localVarApiClient;

    public SkillsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SkillsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for skillsGet
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsGetCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsGetValidateBeforeCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = skillsGetCall(page, order, titleEn, titleBn, _callback);
        return localVarCall;

    }

    /**
     * get_list
     * API endpoint to get the list of Skills.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return Skill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public Skill skillsGet(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        ApiResponse<Skill> localVarResp = skillsGetWithHttpInfo(page, order, titleEn, titleBn);
        return localVarResp.getData();
    }

    /**
     * get_list
     * API endpoint to get the list of Skills.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return ApiResponse&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Skill> skillsGetWithHttpInfo(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        okhttp3.Call localVarCall = skillsGetValidateBeforeCall(page, order, titleEn, titleBn, null);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get_list (asynchronously)
     * API endpoint to get the list of Skills.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsGetAsync(Integer page, String order, String titleEn, String titleBn, final ApiCallback<Skill> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsGetValidateBeforeCall(page, order, titleEn, titleBn, _callback);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsPost
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsPostCall(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsPostValidateBeforeCall(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling skillsPost(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling skillsPost(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling skillsPost(Async)");
        }
        

        okhttp3.Call localVarCall = skillsPostCall(organizationId, titleEn, titleBn, description, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * create
     * API endpoint to create a Skill.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return Skill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public Skill skillsPost(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus) throws ApiException {
        ApiResponse<Skill> localVarResp = skillsPostWithHttpInfo(organizationId, titleEn, titleBn, description, rowStatus);
        return localVarResp.getData();
    }

    /**
     * create
     * API endpoint to create a Skill.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Skill> skillsPostWithHttpInfo(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = skillsPostValidateBeforeCall(organizationId, titleEn, titleBn, description, rowStatus, null);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * API endpoint to create a Skill.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsPostAsync(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus, final ApiCallback<Skill> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsPostValidateBeforeCall(organizationId, titleEn, titleBn, description, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsSkillIdDelete
     * @param skillId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsSkillIdDeleteCall(Integer skillId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{skillId}"
            .replaceAll("\\{" + "skillId" + "\\}", localVarApiClient.escapeString(skillId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsSkillIdDeleteValidateBeforeCall(Integer skillId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'skillId' is set
        if (skillId == null) {
            throw new ApiException("Missing the required parameter 'skillId' when calling skillsSkillIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = skillsSkillIdDeleteCall(skillId, _callback);
        return localVarCall;

    }

    /**
     * delete
     * API endpoint to delete a specified Skill.A successful request response will show 200 HTTP status code
     * @param skillId  (required)
     * @return Skill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public Skill skillsSkillIdDelete(Integer skillId) throws ApiException {
        ApiResponse<Skill> localVarResp = skillsSkillIdDeleteWithHttpInfo(skillId);
        return localVarResp.getData();
    }

    /**
     * delete
     * API endpoint to delete a specified Skill.A successful request response will show 200 HTTP status code
     * @param skillId  (required)
     * @return ApiResponse&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Skill> skillsSkillIdDeleteWithHttpInfo(Integer skillId) throws ApiException {
        okhttp3.Call localVarCall = skillsSkillIdDeleteValidateBeforeCall(skillId, null);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete (asynchronously)
     * API endpoint to delete a specified Skill.A successful request response will show 200 HTTP status code
     * @param skillId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsSkillIdDeleteAsync(Integer skillId, final ApiCallback<Skill> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsSkillIdDeleteValidateBeforeCall(skillId, _callback);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsSkillIdGet
     * @param skillId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsSkillIdGetCall(Integer skillId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{skillId}"
            .replaceAll("\\{" + "skillId" + "\\}", localVarApiClient.escapeString(skillId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsSkillIdGetValidateBeforeCall(Integer skillId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'skillId' is set
        if (skillId == null) {
            throw new ApiException("Missing the required parameter 'skillId' when calling skillsSkillIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = skillsSkillIdGetCall(skillId, _callback);
        return localVarCall;

    }

    /**
     * get_one
     * API endpoint to get a specified Skill.A successful request response will show 200 HTTP status code
     * @param skillId  (required)
     * @return Skill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public Skill skillsSkillIdGet(Integer skillId) throws ApiException {
        ApiResponse<Skill> localVarResp = skillsSkillIdGetWithHttpInfo(skillId);
        return localVarResp.getData();
    }

    /**
     * get_one
     * API endpoint to get a specified Skill.A successful request response will show 200 HTTP status code
     * @param skillId  (required)
     * @return ApiResponse&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Skill> skillsSkillIdGetWithHttpInfo(Integer skillId) throws ApiException {
        okhttp3.Call localVarCall = skillsSkillIdGetValidateBeforeCall(skillId, null);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get_one (asynchronously)
     * API endpoint to get a specified Skill.A successful request response will show 200 HTTP status code
     * @param skillId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsSkillIdGetAsync(Integer skillId, final ApiCallback<Skill> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsSkillIdGetValidateBeforeCall(skillId, _callback);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsSkillIdPut
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsSkillIdPutCall(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{skillId}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsSkillIdPutValidateBeforeCall(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling skillsSkillIdPut(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling skillsSkillIdPut(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling skillsSkillIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = skillsSkillIdPutCall(organizationId, titleEn, titleBn, description, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * update
     * API endpoint to get a specified Skill. A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return Skill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public Skill skillsSkillIdPut(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus) throws ApiException {
        ApiResponse<Skill> localVarResp = skillsSkillIdPutWithHttpInfo(organizationId, titleEn, titleBn, description, rowStatus);
        return localVarResp.getData();
    }

    /**
     * update
     * API endpoint to get a specified Skill. A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Skill> skillsSkillIdPutWithHttpInfo(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = skillsSkillIdPutValidateBeforeCall(organizationId, titleEn, titleBn, description, rowStatus, null);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update (asynchronously)
     * API endpoint to get a specified Skill. A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsSkillIdPutAsync(Integer organizationId, String titleEn, String titleBn, String description, Integer rowStatus, final ApiCallback<Skill> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsSkillIdPutValidateBeforeCall(organizationId, titleEn, titleBn, description, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
