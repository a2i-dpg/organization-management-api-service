/*
 * organization management api service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Rank;
import org.openapitools.client.model.RankType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RankApi {
    private ApiClient localVarApiClient;

    public RankApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RankApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getOne1
     * @param rankId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOne1Call(Integer rankId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ranks/{rankId}"
            .replaceAll("\\{" + "rankId" + "\\}", localVarApiClient.escapeString(rankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOne1ValidateBeforeCall(Integer rankId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rankId' is set
        if (rankId == null) {
            throw new ApiException("Missing the required parameter 'rankId' when calling getOne1(Async)");
        }
        

        okhttp3.Call localVarCall = getOne1Call(rankId, _callback);
        return localVarCall;

    }

    /**
     * get_one
     * API endpoint to get a rank.A successful request response will show 200 HTTP status code
     * @param rankId  (required)
     * @return Rank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public Rank getOne1(Integer rankId) throws ApiException {
        ApiResponse<Rank> localVarResp = getOne1WithHttpInfo(rankId);
        return localVarResp.getData();
    }

    /**
     * get_one
     * API endpoint to get a rank.A successful request response will show 200 HTTP status code
     * @param rankId  (required)
     * @return ApiResponse&lt;Rank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rank> getOne1WithHttpInfo(Integer rankId) throws ApiException {
        okhttp3.Call localVarCall = getOne1ValidateBeforeCall(rankId, null);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get_one (asynchronously)
     * API endpoint to get a rank.A successful request response will show 200 HTTP status code
     * @param rankId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOne1Async(Integer rankId, final ApiCallback<Rank> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOne1ValidateBeforeCall(rankId, _callback);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ranksGet
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksGetCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ranks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ranksGetValidateBeforeCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ranksGetCall(page, order, titleEn, titleBn, _callback);
        return localVarCall;

    }

    /**
     * get_list
     * API endpoint to get the list of ranks .A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return Rank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public Rank ranksGet(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        ApiResponse<Rank> localVarResp = ranksGetWithHttpInfo(page, order, titleEn, titleBn);
        return localVarResp.getData();
    }

    /**
     * get_list
     * API endpoint to get the list of ranks .A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return ApiResponse&lt;Rank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rank> ranksGetWithHttpInfo(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        okhttp3.Call localVarCall = ranksGetValidateBeforeCall(page, order, titleEn, titleBn, null);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get_list (asynchronously)
     * API endpoint to get the list of ranks .A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksGetAsync(Integer page, String order, String titleEn, String titleBn, final ApiCallback<Rank> _callback) throws ApiException {

        okhttp3.Call localVarCall = ranksGetValidateBeforeCall(page, order, titleEn, titleBn, _callback);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ranksPost
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksPostCall(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ranks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (rankTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank_type_id", rankTypeId));
        }

        if (grade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grade", grade));
        }

        if (displayOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_order", displayOrder));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ranksPostValidateBeforeCall(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling ranksPost(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling ranksPost(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling ranksPost(Async)");
        }
        
        // verify the required parameter 'rankTypeId' is set
        if (rankTypeId == null) {
            throw new ApiException("Missing the required parameter 'rankTypeId' when calling ranksPost(Async)");
        }
        

        okhttp3.Call localVarCall = ranksPostCall(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * create
     * API endpoint to get the list of ranks.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @return Rank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public Rank ranksPost(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus) throws ApiException {
        ApiResponse<Rank> localVarResp = ranksPostWithHttpInfo(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus);
        return localVarResp.getData();
    }

    /**
     * create
     * API endpoint to get the list of ranks.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;Rank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rank> ranksPostWithHttpInfo(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = ranksPostValidateBeforeCall(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus, null);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * API endpoint to get the list of ranks.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksPostAsync(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus, final ApiCallback<Rank> _callback) throws ApiException {

        okhttp3.Call localVarCall = ranksPostValidateBeforeCall(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ranksRankIdDelete
     * @param rankId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksRankIdDeleteCall(Integer rankId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ranks/{rankId}"
            .replaceAll("\\{" + "rankId" + "\\}", localVarApiClient.escapeString(rankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ranksRankIdDeleteValidateBeforeCall(Integer rankId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rankId' is set
        if (rankId == null) {
            throw new ApiException("Missing the required parameter 'rankId' when calling ranksRankIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = ranksRankIdDeleteCall(rankId, _callback);
        return localVarCall;

    }

    /**
     * delete
     *  API endpoint to get a rank.A successful request response will show 200 HTTP status code
     * @param rankId  (required)
     * @return Rank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public Rank ranksRankIdDelete(Integer rankId) throws ApiException {
        ApiResponse<Rank> localVarResp = ranksRankIdDeleteWithHttpInfo(rankId);
        return localVarResp.getData();
    }

    /**
     * delete
     *  API endpoint to get a rank.A successful request response will show 200 HTTP status code
     * @param rankId  (required)
     * @return ApiResponse&lt;Rank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rank> ranksRankIdDeleteWithHttpInfo(Integer rankId) throws ApiException {
        okhttp3.Call localVarCall = ranksRankIdDeleteValidateBeforeCall(rankId, null);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete (asynchronously)
     *  API endpoint to get a rank.A successful request response will show 200 HTTP status code
     * @param rankId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksRankIdDeleteAsync(Integer rankId, final ApiCallback<Rank> _callback) throws ApiException {

        okhttp3.Call localVarCall = ranksRankIdDeleteValidateBeforeCall(rankId, _callback);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ranksRankIdPut
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksRankIdPutCall(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ranks/{rankId}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (rankTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank_type_id", rankTypeId));
        }

        if (grade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grade", grade));
        }

        if (displayOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_order", displayOrder));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ranksRankIdPutValidateBeforeCall(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling ranksRankIdPut(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling ranksRankIdPut(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling ranksRankIdPut(Async)");
        }
        
        // verify the required parameter 'rankTypeId' is set
        if (rankTypeId == null) {
            throw new ApiException("Missing the required parameter 'rankTypeId' when calling ranksRankIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = ranksRankIdPutCall(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * update
     * API endpoint to get a rank. A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @return RankType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public RankType ranksRankIdPut(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus) throws ApiException {
        ApiResponse<RankType> localVarResp = ranksRankIdPutWithHttpInfo(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus);
        return localVarResp.getData();
    }

    /**
     * update
     * API endpoint to get a rank. A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;RankType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RankType> ranksRankIdPutWithHttpInfo(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = ranksRankIdPutValidateBeforeCall(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus, null);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update (asynchronously)
     * API endpoint to get a rank. A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param rankTypeId  (required)
     * @param grade  (optional)
     * @param displayOrder  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ranksRankIdPutAsync(Integer organizationId, String titleEn, String titleBn, Integer rankTypeId, String grade, Integer displayOrder, Integer rowStatus, final ApiCallback<RankType> _callback) throws ApiException {

        okhttp3.Call localVarCall = ranksRankIdPutValidateBeforeCall(organizationId, titleEn, titleBn, rankTypeId, grade, displayOrder, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
