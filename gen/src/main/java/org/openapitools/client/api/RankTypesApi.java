/*
 * organization management api service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RankType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RankTypesApi {
    private ApiClient localVarApiClient;

    public RankTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RankTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for delete
     * @param rankTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(Integer rankTypeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank-types/{rankTypeId}"
            .replaceAll("\\{" + "rankTypeId" + "\\}", localVarApiClient.escapeString(rankTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(Integer rankTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rankTypeId' is set
        if (rankTypeId == null) {
            throw new ApiException("Missing the required parameter 'rankTypeId' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(rankTypeId, _callback);
        return localVarCall;

    }

    /**
     * delete
     *  API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public void delete(Integer rankTypeId) throws ApiException {
        deleteWithHttpInfo(rankTypeId);
    }

    /**
     * delete
     *  API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(Integer rankTypeId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(rankTypeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete (asynchronously)
     *  API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(Integer rankTypeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(rankTypeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankTypesGet
     * @param page  (optional)
     * @param limit  (optional)
     * @param organizationId  (optional)
     * @param rowStatus  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesGetCall(Integer page, Integer limit, Integer organizationId, Integer rowStatus, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankTypesGetValidateBeforeCall(Integer page, Integer limit, Integer organizationId, Integer rowStatus, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rankTypesGetCall(page, limit, organizationId, rowStatus, order, titleEn, titleBn, _callback);
        return localVarCall;

    }

    /**
     * get_list
     * API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param limit  (optional)
     * @param organizationId  (optional)
     * @param rowStatus  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return RankType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public RankType rankTypesGet(Integer page, Integer limit, Integer organizationId, Integer rowStatus, String order, String titleEn, String titleBn) throws ApiException {
        ApiResponse<RankType> localVarResp = rankTypesGetWithHttpInfo(page, limit, organizationId, rowStatus, order, titleEn, titleBn);
        return localVarResp.getData();
    }

    /**
     * get_list
     * API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param limit  (optional)
     * @param organizationId  (optional)
     * @param rowStatus  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return ApiResponse&lt;RankType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RankType> rankTypesGetWithHttpInfo(Integer page, Integer limit, Integer organizationId, Integer rowStatus, String order, String titleEn, String titleBn) throws ApiException {
        okhttp3.Call localVarCall = rankTypesGetValidateBeforeCall(page, limit, organizationId, rowStatus, order, titleEn, titleBn, null);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get_list (asynchronously)
     * API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param limit  (optional)
     * @param organizationId  (optional)
     * @param rowStatus  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesGetAsync(Integer page, Integer limit, Integer organizationId, Integer rowStatus, String order, String titleEn, String titleBn, final ApiCallback<RankType> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankTypesGetValidateBeforeCall(page, limit, organizationId, rowStatus, order, titleEn, titleBn, _callback);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankTypesPost
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesPostCall(String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankTypesPostValidateBeforeCall(String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling rankTypesPost(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling rankTypesPost(Async)");
        }
        

        okhttp3.Call localVarCall = rankTypesPostCall(titleEn, titleBn, organizationId, description, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * create
     * API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return RankType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public RankType rankTypesPost(String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus) throws ApiException {
        ApiResponse<RankType> localVarResp = rankTypesPostWithHttpInfo(titleEn, titleBn, organizationId, description, rowStatus);
        return localVarResp.getData();
    }

    /**
     * create
     * API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;RankType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RankType> rankTypesPostWithHttpInfo(String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = rankTypesPostValidateBeforeCall(titleEn, titleBn, organizationId, description, rowStatus, null);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * API endpoint to get the list of rank types.A successful request response will show 200 HTTP status code
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesPostAsync(String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus, final ApiCallback<RankType> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankTypesPostValidateBeforeCall(titleEn, titleBn, organizationId, description, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankTypesRankTypeIdGet
     * @param rankTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesRankTypeIdGetCall(Integer rankTypeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank-types/{rankTypeId}"
            .replaceAll("\\{" + "rankTypeId" + "\\}", localVarApiClient.escapeString(rankTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankTypesRankTypeIdGetValidateBeforeCall(Integer rankTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rankTypeId' is set
        if (rankTypeId == null) {
            throw new ApiException("Missing the required parameter 'rankTypeId' when calling rankTypesRankTypeIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = rankTypesRankTypeIdGetCall(rankTypeId, _callback);
        return localVarCall;

    }

    /**
     * get_one
     * API endpoint to get a specified rank type.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @return RankType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public RankType rankTypesRankTypeIdGet(Integer rankTypeId) throws ApiException {
        ApiResponse<RankType> localVarResp = rankTypesRankTypeIdGetWithHttpInfo(rankTypeId);
        return localVarResp.getData();
    }

    /**
     * get_one
     * API endpoint to get a specified rank type.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @return ApiResponse&lt;RankType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RankType> rankTypesRankTypeIdGetWithHttpInfo(Integer rankTypeId) throws ApiException {
        okhttp3.Call localVarCall = rankTypesRankTypeIdGetValidateBeforeCall(rankTypeId, null);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get_one (asynchronously)
     * API endpoint to get a specified rank type.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesRankTypeIdGetAsync(Integer rankTypeId, final ApiCallback<RankType> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankTypesRankTypeIdGetValidateBeforeCall(rankTypeId, _callback);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankTypesRankTypeIdPut
     * @param rankTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesRankTypeIdPutCall(Integer rankTypeId, String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank-types/{rankTypeId}"
            .replaceAll("\\{" + "rankTypeId" + "\\}", localVarApiClient.escapeString(rankTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankTypesRankTypeIdPutValidateBeforeCall(Integer rankTypeId, String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rankTypeId' is set
        if (rankTypeId == null) {
            throw new ApiException("Missing the required parameter 'rankTypeId' when calling rankTypesRankTypeIdPut(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling rankTypesRankTypeIdPut(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling rankTypesRankTypeIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = rankTypesRankTypeIdPutCall(rankTypeId, titleEn, titleBn, organizationId, description, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * update
     * API endpoint to get a specified rank type.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return RankType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public RankType rankTypesRankTypeIdPut(Integer rankTypeId, String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus) throws ApiException {
        ApiResponse<RankType> localVarResp = rankTypesRankTypeIdPutWithHttpInfo(rankTypeId, titleEn, titleBn, organizationId, description, rowStatus);
        return localVarResp.getData();
    }

    /**
     * update
     * API endpoint to get a specified rank type.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;RankType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RankType> rankTypesRankTypeIdPutWithHttpInfo(Integer rankTypeId, String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = rankTypesRankTypeIdPutValidateBeforeCall(rankTypeId, titleEn, titleBn, organizationId, description, rowStatus, null);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update (asynchronously)
     * API endpoint to get a specified rank type.A successful request response will show 200 HTTP status code
     * @param rankTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (optional)
     * @param description  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankTypesRankTypeIdPutAsync(Integer rankTypeId, String titleEn, String titleBn, Integer organizationId, String description, Integer rowStatus, final ApiCallback<RankType> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankTypesRankTypeIdPutValidateBeforeCall(rankTypeId, titleEn, titleBn, organizationId, description, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<RankType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
