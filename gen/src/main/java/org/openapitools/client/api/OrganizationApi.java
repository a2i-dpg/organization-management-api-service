/*
 * organization management api service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Organization;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient localVarApiClient;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for organizationGet
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationGetCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationGetValidateBeforeCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = organizationGetCall(page, order, titleEn, titleBn, _callback);
        return localVarCall;

    }

    /**
     * get list
     * API endpoint to get the list of organizations.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public Organization organizationGet(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationGetWithHttpInfo(page, order, titleEn, titleBn);
        return localVarResp.getData();
    }

    /**
     * get list
     * API endpoint to get the list of organizations.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationGetWithHttpInfo(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        okhttp3.Call localVarCall = organizationGetValidateBeforeCall(page, order, titleEn, titleBn, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get list (asynchronously)
     * API endpoint to get the list of organizations.A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationGetAsync(Integer page, String order, String titleEn, String titleBn, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationGetValidateBeforeCall(page, order, titleEn, titleBn, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationPost
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param logo  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationPostCall(Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String logo, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_type_id", organizationTypeId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (locDivisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_division_id", locDivisionId));
        }

        if (locDistrictId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_district_id", locDistrictId));
        }

        if (locUpazilaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_upazila_id", locUpazilaId));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (mobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile", mobile));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (faxNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fax_no", faxNo));
        }

        if (contactPersonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_name", contactPersonName));
        }

        if (contactPersonMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_mobile", contactPersonMobile));
        }

        if (contactPersonEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_email", contactPersonEmail));
        }

        if (contactPersonDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_designation", contactPersonDesignation));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (logo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logo", logo));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationPostValidateBeforeCall(Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String logo, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationTypeId' is set
        if (organizationTypeId == null) {
            throw new ApiException("Missing the required parameter 'organizationTypeId' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'contactPersonName' is set
        if (contactPersonName == null) {
            throw new ApiException("Missing the required parameter 'contactPersonName' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'contactPersonMobile' is set
        if (contactPersonMobile == null) {
            throw new ApiException("Missing the required parameter 'contactPersonMobile' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'contactPersonEmail' is set
        if (contactPersonEmail == null) {
            throw new ApiException("Missing the required parameter 'contactPersonEmail' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'contactPersonDesignation' is set
        if (contactPersonDesignation == null) {
            throw new ApiException("Missing the required parameter 'contactPersonDesignation' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'logo' is set
        if (logo == null) {
            throw new ApiException("Missing the required parameter 'logo' when calling organizationPost(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling organizationPost(Async)");
        }
        

        okhttp3.Call localVarCall = organizationPostCall(organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, logo, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, _callback);
        return localVarCall;

    }

    /**
     * create
     * API endpoint to create a organization.A successful request response will show 200 HTTP status code
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param logo  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public Organization organizationPost(Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String logo, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationPostWithHttpInfo(organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, logo, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description);
        return localVarResp.getData();
    }

    /**
     * create
     * API endpoint to create a organization.A successful request response will show 200 HTTP status code
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param logo  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationPostWithHttpInfo(Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String logo, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description) throws ApiException {
        okhttp3.Call localVarCall = organizationPostValidateBeforeCall(organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, logo, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * API endpoint to create a organization.A successful request response will show 200 HTTP status code
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param logo  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationPostAsync(Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String logo, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationPostValidateBeforeCall(organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, logo, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOrganizationIdDelete
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdDeleteCall(Integer organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOrganizationIdDeleteValidateBeforeCall(Integer organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = organizationsOrganizationIdDeleteCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * delete
     *  API endpoint to delete a specified organization  A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public Organization organizationsOrganizationIdDelete(Integer organizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsOrganizationIdDeleteWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * delete
     *  API endpoint to delete a specified organization  A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsOrganizationIdDeleteWithHttpInfo(Integer organizationId) throws ApiException {
        okhttp3.Call localVarCall = organizationsOrganizationIdDeleteValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete (asynchronously)
     *  API endpoint to delete a specified organization  A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdDeleteAsync(Integer organizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOrganizationIdDeleteValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOrganizationIdGet
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdGetCall(Integer organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOrganizationIdGetValidateBeforeCall(Integer organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = organizationsOrganizationIdGetCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * get one
     * API endpoint to get a specified organization.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public void organizationsOrganizationIdGet(Integer organizationId) throws ApiException {
        organizationsOrganizationIdGetWithHttpInfo(organizationId);
    }

    /**
     * get one
     * API endpoint to get a specified organization.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizationsOrganizationIdGetWithHttpInfo(Integer organizationId) throws ApiException {
        okhttp3.Call localVarCall = organizationsOrganizationIdGetValidateBeforeCall(organizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * get one (asynchronously)
     * API endpoint to get a specified organization.A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdGetAsync(Integer organizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOrganizationIdGetValidateBeforeCall(organizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOrganizationIdPut
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @param logo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdPutCall(Integer organizationId, Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, String logo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_type_id", organizationTypeId));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (locDivisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_division_id", locDivisionId));
        }

        if (locDistrictId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_district_id", locDistrictId));
        }

        if (locUpazilaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_upazila_id", locUpazilaId));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (mobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile", mobile));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (faxNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fax_no", faxNo));
        }

        if (contactPersonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_name", contactPersonName));
        }

        if (contactPersonMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_mobile", contactPersonMobile));
        }

        if (contactPersonEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_email", contactPersonEmail));
        }

        if (contactPersonDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_designation", contactPersonDesignation));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (logo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logo", logo));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOrganizationIdPutValidateBeforeCall(Integer organizationId, Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, String logo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'organizationTypeId' is set
        if (organizationTypeId == null) {
            throw new ApiException("Missing the required parameter 'organizationTypeId' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonName' is set
        if (contactPersonName == null) {
            throw new ApiException("Missing the required parameter 'contactPersonName' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonMobile' is set
        if (contactPersonMobile == null) {
            throw new ApiException("Missing the required parameter 'contactPersonMobile' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonEmail' is set
        if (contactPersonEmail == null) {
            throw new ApiException("Missing the required parameter 'contactPersonEmail' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonDesignation' is set
        if (contactPersonDesignation == null) {
            throw new ApiException("Missing the required parameter 'contactPersonDesignation' when calling organizationsOrganizationIdPut(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling organizationsOrganizationIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = organizationsOrganizationIdPutCall(organizationId, organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, logo, _callback);
        return localVarCall;

    }

    /**
     * update
     * ###### API endpoint to get a specified organization  A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @param logo  (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public Organization organizationsOrganizationIdPut(Integer organizationId, Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, String logo) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsOrganizationIdPutWithHttpInfo(organizationId, organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, logo);
        return localVarResp.getData();
    }

    /**
     * update
     * ###### API endpoint to get a specified organization  A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @param logo  (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsOrganizationIdPutWithHttpInfo(Integer organizationId, Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, String logo) throws ApiException {
        okhttp3.Call localVarCall = organizationsOrganizationIdPutValidateBeforeCall(organizationId, organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, logo, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update (asynchronously)
     * ###### API endpoint to get a specified organization  A successful request response will show 200 HTTP status code
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param domain  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param description  (optional)
     * @param logo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdPutAsync(Integer organizationId, Integer organizationTypeId, String titleEn, String titleBn, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, String domain, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, String description, String logo, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOrganizationIdPutValidateBeforeCall(organizationId, organizationTypeId, titleEn, titleBn, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, domain, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, description, logo, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
