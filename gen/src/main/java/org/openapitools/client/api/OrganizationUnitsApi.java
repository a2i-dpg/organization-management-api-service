/*
 * organization management api service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OrganizationUnit;
import org.openapitools.client.model.OrganizationUnitId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationUnitsApi {
    private ApiClient localVarApiClient;

    public OrganizationUnitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationUnitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for organizationUnitsGet
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsGetCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization-units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationUnitsGetValidateBeforeCall(Integer page, String order, String titleEn, String titleBn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = organizationUnitsGetCall(page, order, titleEn, titleBn, _callback);
        return localVarCall;

    }

    /**
     * get list
     * API endpoint to get the list of organization Units. A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return OrganizationUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationUnit organizationUnitsGet(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        ApiResponse<OrganizationUnit> localVarResp = organizationUnitsGetWithHttpInfo(page, order, titleEn, titleBn);
        return localVarResp.getData();
    }

    /**
     * get list
     * API endpoint to get the list of organization Units. A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @return ApiResponse&lt;OrganizationUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationUnit> organizationUnitsGetWithHttpInfo(Integer page, String order, String titleEn, String titleBn) throws ApiException {
        okhttp3.Call localVarCall = organizationUnitsGetValidateBeforeCall(page, order, titleEn, titleBn, null);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get list (asynchronously)
     * API endpoint to get the list of organization Units. A successful request response will show 200 HTTP status code
     * @param page  (optional)
     * @param order  (optional)
     * @param titleEn  (optional)
     * @param titleBn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsGetAsync(Integer page, String order, String titleEn, String titleBn, final ApiCallback<OrganizationUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationUnitsGetValidateBeforeCall(page, order, titleEn, titleBn, _callback);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationUnitsOrganizationUnitIdDelete
     * @param organizationUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsOrganizationUnitIdDeleteCall(Integer organizationUnitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization-units/{organizationUnitId}"
            .replaceAll("\\{" + "organizationUnitId" + "\\}", localVarApiClient.escapeString(organizationUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationUnitsOrganizationUnitIdDeleteValidateBeforeCall(Integer organizationUnitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationUnitId' is set
        if (organizationUnitId == null) {
            throw new ApiException("Missing the required parameter 'organizationUnitId' when calling organizationUnitsOrganizationUnitIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdDeleteCall(organizationUnitId, _callback);
        return localVarCall;

    }

    /**
     * delete
     * API endpoint to delete a specified Organization  Unit.A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @return OrganizationUnitId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationUnitId organizationUnitsOrganizationUnitIdDelete(Integer organizationUnitId) throws ApiException {
        ApiResponse<OrganizationUnitId> localVarResp = organizationUnitsOrganizationUnitIdDeleteWithHttpInfo(organizationUnitId);
        return localVarResp.getData();
    }

    /**
     * delete
     * API endpoint to delete a specified Organization  Unit.A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @return ApiResponse&lt;OrganizationUnitId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationUnitId> organizationUnitsOrganizationUnitIdDeleteWithHttpInfo(Integer organizationUnitId) throws ApiException {
        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdDeleteValidateBeforeCall(organizationUnitId, null);
        Type localVarReturnType = new TypeToken<OrganizationUnitId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete (asynchronously)
     * API endpoint to delete a specified Organization  Unit.A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsOrganizationUnitIdDeleteAsync(Integer organizationUnitId, final ApiCallback<OrganizationUnitId> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdDeleteValidateBeforeCall(organizationUnitId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationUnitId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationUnitsOrganizationUnitIdGet
     * @param organizationUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsOrganizationUnitIdGetCall(Integer organizationUnitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization-units/{organizationUnitId}"
            .replaceAll("\\{" + "organizationUnitId" + "\\}", localVarApiClient.escapeString(organizationUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationUnitsOrganizationUnitIdGetValidateBeforeCall(Integer organizationUnitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationUnitId' is set
        if (organizationUnitId == null) {
            throw new ApiException("Missing the required parameter 'organizationUnitId' when calling organizationUnitsOrganizationUnitIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdGetCall(organizationUnitId, _callback);
        return localVarCall;

    }

    /**
     * get one
     *  API endpoint to get a specified Organization  Unit.A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @return OrganizationUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationUnit organizationUnitsOrganizationUnitIdGet(Integer organizationUnitId) throws ApiException {
        ApiResponse<OrganizationUnit> localVarResp = organizationUnitsOrganizationUnitIdGetWithHttpInfo(organizationUnitId);
        return localVarResp.getData();
    }

    /**
     * get one
     *  API endpoint to get a specified Organization  Unit.A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @return ApiResponse&lt;OrganizationUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationUnit> organizationUnitsOrganizationUnitIdGetWithHttpInfo(Integer organizationUnitId) throws ApiException {
        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdGetValidateBeforeCall(organizationUnitId, null);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get one (asynchronously)
     *  API endpoint to get a specified Organization  Unit.A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsOrganizationUnitIdGetAsync(Integer organizationUnitId, final ApiCallback<OrganizationUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdGetValidateBeforeCall(organizationUnitId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationUnitsOrganizationUnitIdPut
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsOrganizationUnitIdPutCall(Integer organizationUnitId, String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization-units/{organizationUnitId}"
            .replaceAll("\\{" + "organizationUnitId" + "\\}", localVarApiClient.escapeString(organizationUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (organizationTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_type_id", organizationTypeId));
        }

        if (locDivisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_division_id", locDivisionId));
        }

        if (locDistrictId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_district_id", locDistrictId));
        }

        if (locUpazilaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_upazila_id", locUpazilaId));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (mobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile", mobile));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (faxNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fax_no", faxNo));
        }

        if (contactPersonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_name", contactPersonName));
        }

        if (contactPersonMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_mobile", contactPersonMobile));
        }

        if (contactPersonEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_email", contactPersonEmail));
        }

        if (contactPersonDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_designation", contactPersonDesignation));
        }

        if (employeeSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employee_size", employeeSize));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationUnitsOrganizationUnitIdPutValidateBeforeCall(Integer organizationUnitId, String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationUnitId' is set
        if (organizationUnitId == null) {
            throw new ApiException("Missing the required parameter 'organizationUnitId' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'organizationTypeId' is set
        if (organizationTypeId == null) {
            throw new ApiException("Missing the required parameter 'organizationTypeId' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonName' is set
        if (contactPersonName == null) {
            throw new ApiException("Missing the required parameter 'contactPersonName' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonMobile' is set
        if (contactPersonMobile == null) {
            throw new ApiException("Missing the required parameter 'contactPersonMobile' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonEmail' is set
        if (contactPersonEmail == null) {
            throw new ApiException("Missing the required parameter 'contactPersonEmail' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'contactPersonDesignation' is set
        if (contactPersonDesignation == null) {
            throw new ApiException("Missing the required parameter 'contactPersonDesignation' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        
        // verify the required parameter 'employeeSize' is set
        if (employeeSize == null) {
            throw new ApiException("Missing the required parameter 'employeeSize' when calling organizationUnitsOrganizationUnitIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdPutCall(organizationUnitId, titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * get one
     * API endpoint to update a specified Organization  Unit. A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @return OrganizationUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationUnit organizationUnitsOrganizationUnitIdPut(Integer organizationUnitId, String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus) throws ApiException {
        ApiResponse<OrganizationUnit> localVarResp = organizationUnitsOrganizationUnitIdPutWithHttpInfo(organizationUnitId, titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus);
        return localVarResp.getData();
    }

    /**
     * get one
     * API endpoint to update a specified Organization  Unit. A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;OrganizationUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationUnit> organizationUnitsOrganizationUnitIdPutWithHttpInfo(Integer organizationUnitId, String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdPutValidateBeforeCall(organizationUnitId, titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus, null);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get one (asynchronously)
     * API endpoint to update a specified Organization  Unit. A successful request response will show 200 HTTP status code
     * @param organizationUnitId  (required)
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get one </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsOrganizationUnitIdPutAsync(Integer organizationUnitId, String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus, final ApiCallback<OrganizationUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationUnitsOrganizationUnitIdPutValidateBeforeCall(organizationUnitId, titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationUnitsPost
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsPostCall(String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization-units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (titleEn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_en", titleEn));
        }

        if (titleBn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_bn", titleBn));
        }

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (organizationTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_type_id", organizationTypeId));
        }

        if (locDivisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_division_id", locDivisionId));
        }

        if (locDistrictId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_district_id", locDistrictId));
        }

        if (locUpazilaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc_upazila_id", locUpazilaId));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (mobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile", mobile));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (faxNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fax_no", faxNo));
        }

        if (contactPersonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_name", contactPersonName));
        }

        if (contactPersonMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_mobile", contactPersonMobile));
        }

        if (contactPersonEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_email", contactPersonEmail));
        }

        if (contactPersonDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_person_designation", contactPersonDesignation));
        }

        if (employeeSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employee_size", employeeSize));
        }

        if (rowStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row_status", rowStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationUnitsPostValidateBeforeCall(String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleEn' is set
        if (titleEn == null) {
            throw new ApiException("Missing the required parameter 'titleEn' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'titleBn' is set
        if (titleBn == null) {
            throw new ApiException("Missing the required parameter 'titleBn' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'organizationTypeId' is set
        if (organizationTypeId == null) {
            throw new ApiException("Missing the required parameter 'organizationTypeId' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'contactPersonName' is set
        if (contactPersonName == null) {
            throw new ApiException("Missing the required parameter 'contactPersonName' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'contactPersonMobile' is set
        if (contactPersonMobile == null) {
            throw new ApiException("Missing the required parameter 'contactPersonMobile' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'contactPersonEmail' is set
        if (contactPersonEmail == null) {
            throw new ApiException("Missing the required parameter 'contactPersonEmail' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'contactPersonDesignation' is set
        if (contactPersonDesignation == null) {
            throw new ApiException("Missing the required parameter 'contactPersonDesignation' when calling organizationUnitsPost(Async)");
        }
        
        // verify the required parameter 'employeeSize' is set
        if (employeeSize == null) {
            throw new ApiException("Missing the required parameter 'employeeSize' when calling organizationUnitsPost(Async)");
        }
        

        okhttp3.Call localVarCall = organizationUnitsPostCall(titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus, _callback);
        return localVarCall;

    }

    /**
     * create
     *  API endpoint to create organization Unit.A successful request response will show 200 HTTP status code
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @return OrganizationUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationUnit organizationUnitsPost(String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus) throws ApiException {
        ApiResponse<OrganizationUnit> localVarResp = organizationUnitsPostWithHttpInfo(titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus);
        return localVarResp.getData();
    }

    /**
     * create
     *  API endpoint to create organization Unit.A successful request response will show 200 HTTP status code
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @return ApiResponse&lt;OrganizationUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationUnit> organizationUnitsPostWithHttpInfo(String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus) throws ApiException {
        okhttp3.Call localVarCall = organizationUnitsPostValidateBeforeCall(titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus, null);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     *  API endpoint to create organization Unit.A successful request response will show 200 HTTP status code
     * @param titleEn  (required)
     * @param titleBn  (required)
     * @param organizationId  (required)
     * @param organizationTypeId  (required)
     * @param mobile  (required)
     * @param email  (required)
     * @param contactPersonName  (required)
     * @param contactPersonMobile  (required)
     * @param contactPersonEmail  (required)
     * @param contactPersonDesignation  (required)
     * @param employeeSize  (required)
     * @param locDivisionId  (optional)
     * @param locDistrictId  (optional)
     * @param locUpazilaId  (optional)
     * @param address  (optional)
     * @param faxNo  (optional)
     * @param rowStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUnitsPostAsync(String titleEn, String titleBn, Integer organizationId, Integer organizationTypeId, String mobile, String email, String contactPersonName, String contactPersonMobile, String contactPersonEmail, String contactPersonDesignation, Integer employeeSize, Integer locDivisionId, Integer locDistrictId, Integer locUpazilaId, String address, String faxNo, Integer rowStatus, final ApiCallback<OrganizationUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationUnitsPostValidateBeforeCall(titleEn, titleBn, organizationId, organizationTypeId, mobile, email, contactPersonName, contactPersonMobile, contactPersonEmail, contactPersonDesignation, employeeSize, locDivisionId, locDistrictId, locUpazilaId, address, faxNo, rowStatus, _callback);
        Type localVarReturnType = new TypeToken<OrganizationUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
